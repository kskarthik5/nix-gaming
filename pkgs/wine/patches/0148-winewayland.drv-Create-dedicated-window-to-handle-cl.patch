From 100b8ffbb6dad4e5fd7aba410022b123c5a4f630 Mon Sep 17 00:00:00 2001
From: Alexandros Frantzis <alexandros.frantzis@collabora.com>
Date: Wed, 22 Sep 2021 12:35:18 +0300
Subject: [PATCH 148/170] winewayland.drv: Create dedicated window to handle
 clipboard messages.

The clipboard window is created in the PE code, initiated by a driver
kernel callback invoked from the unixlib side. Clipboard messages
are received in the PE side and forwarded to the unixlib side to
be handled there.

Signed-off-by: Alexandros Frantzis <alexandros.frantzis@collabora.com>
---
 dlls/winewayland.drv/Makefile.in              |  1 +
 dlls/winewayland.drv/dllmain.c                |  1 +
 dlls/winewayland.drv/unixlib.h                | 12 ++-
 dlls/winewayland.drv/wayland_data_device.c    | 32 ++++++++
 .../winewayland.drv/wayland_data_device_dll.c | 78 +++++++++++++++++++
 dlls/winewayland.drv/waylanddrv.h             |  5 ++
 dlls/winewayland.drv/waylanddrv_dll.h         |  1 +
 dlls/winewayland.drv/waylanddrv_main.c        |  9 +++
 dlls/winewayland.drv/window.c                 |  3 +
 9 files changed, 141 insertions(+), 1 deletion(-)
 create mode 100644 dlls/winewayland.drv/wayland_data_device_dll.c

diff --git a/dlls/winewayland.drv/Makefile.in b/dlls/winewayland.drv/Makefile.in
index a93192ee246..b05558c78b9 100644
--- a/dlls/winewayland.drv/Makefile.in
+++ b/dlls/winewayland.drv/Makefile.in
@@ -25,6 +25,7 @@ C_SRCS = \
 	wayland_buffer_queue.c \
 	wayland_cursor.c \
 	wayland_data_device.c \
+	wayland_data_device_dll.c \
 	wayland_dmabuf.c \
 	wayland_keyboard.c \
 	wayland_keyboard_layout.c \
diff --git a/dlls/winewayland.drv/dllmain.c b/dlls/winewayland.drv/dllmain.c
index e8f5d0ec100..1efeb31f86b 100644
--- a/dlls/winewayland.drv/dllmain.c
+++ b/dlls/winewayland.drv/dllmain.c
@@ -34,6 +34,7 @@ typedef NTSTATUS (WINAPI *kernel_callback)(void *params, ULONG size);
 static const kernel_callback kernel_callbacks[] =
 {
     waylanddrv_client_load_cursor,
+    waylanddrv_client_create_clipboard_window,
 };
 
 C_ASSERT(NtUserDriverCallbackFirst + ARRAYSIZE(kernel_callbacks) == waylanddrv_client_func_last);
diff --git a/dlls/winewayland.drv/unixlib.h b/dlls/winewayland.drv/unixlib.h
index 50738328c77..3200e83dc6e 100644
--- a/dlls/winewayland.drv/unixlib.h
+++ b/dlls/winewayland.drv/unixlib.h
@@ -30,6 +30,7 @@ typedef UINT PTR32;
 enum waylanddrv_unix_func
 {
     waylanddrv_unix_func_init,
+    waylanddrv_unix_func_clipboard_message,
     waylanddrv_unix_func_count,
 };
 
@@ -39,11 +40,20 @@ struct waylanddrv_unix_init_params
     NTSTATUS (CDECL *unix_call)(enum waylanddrv_unix_func func, void *params);
 };
 
+struct waylanddrv_unix_clipboard_message_params
+{
+    HWND hwnd;
+    UINT msg;
+    WPARAM wparam;
+    LPARAM lparam;
+};
+
 /* driver client callbacks exposed with KernelCallbackTable interface */
 enum waylanddrv_client_func
 {
     waylanddrv_client_func_load_cursor = NtUserDriverCallbackFirst,
-    waylanddrv_client_func_last,
+    waylanddrv_client_func_create_clipboard_window,
+    waylanddrv_client_func_last
 };
 
 C_ASSERT(waylanddrv_client_func_last <= NtUserDriverCallbackLast + 1);
diff --git a/dlls/winewayland.drv/wayland_data_device.c b/dlls/winewayland.drv/wayland_data_device.c
index cd576aada40..3577a5c29d0 100644
--- a/dlls/winewayland.drv/wayland_data_device.c
+++ b/dlls/winewayland.drv/wayland_data_device.c
@@ -258,3 +258,35 @@ void wayland_data_device_deinit(struct wayland_data_device *data_device)
 
     memset(data_device, 0, sizeof(*data_device));
 }
+
+/**********************************************************************
+ *          waylanddrv_unix_clipboard_message
+ */
+NTSTATUS waylanddrv_unix_clipboard_message(void *arg)
+{
+    struct waylanddrv_unix_clipboard_message_params *params = arg;
+
+    switch (params->msg)
+    {
+    case WM_NCCREATE:
+        return TRUE;
+    }
+
+    return NtUserMessageCall(params->hwnd, params->msg, params->wparam,
+                             params->lparam, NULL, NtUserDefWindowProc, FALSE);
+}
+
+/**********************************************************************
+ *          wayland_data_device_ensure_clipboard_window
+ *
+ * Creates (if not already created) the window which handles clipboard
+ * messages for the specified wayland instance.
+ */
+void wayland_data_device_ensure_clipboard_window(struct wayland *wayland)
+{
+    if (!wayland->clipboard_hwnd)
+    {
+        wayland->clipboard_hwnd =
+            ULongToHandle(WAYLANDDRV_CLIENT_CALL(create_clipboard_window, NULL, 0));
+    }
+}
diff --git a/dlls/winewayland.drv/wayland_data_device_dll.c b/dlls/winewayland.drv/wayland_data_device_dll.c
new file mode 100644
index 00000000000..fffea2562e9
--- /dev/null
+++ b/dlls/winewayland.drv/wayland_data_device_dll.c
@@ -0,0 +1,78 @@
+/*
+ * Wayland data device (clipboard and DnD) handling (DLL code)
+ *
+ * Copyright (c) 2020 Alexandros Frantzis for Collabora Ltd
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+#include "waylanddrv_dll.h"
+
+#include "wine/debug.h"
+
+WINE_DEFAULT_DEBUG_CHANNEL(clipboard);
+
+static LRESULT CALLBACK clipboard_wndproc(HWND hwnd, UINT msg, WPARAM wp, LPARAM lp)
+{
+    struct waylanddrv_unix_clipboard_message_params params;
+
+    switch (msg)
+    {
+    case WM_NCCREATE:
+    case WM_CLIPBOARDUPDATE:
+    case WM_RENDERFORMAT:
+    case WM_DESTROYCLIPBOARD:
+        params.hwnd = hwnd;
+        params.msg = msg;
+        params.wparam = wp;
+        params.lparam = lp;
+        return WAYLANDDRV_UNIX_CALL(clipboard_message, &params);
+    }
+
+    return DefWindowProcW(hwnd, msg, wp, lp);
+}
+
+NTSTATUS WINAPI waylanddrv_client_create_clipboard_window(void *arg, ULONG size)
+{
+    static const WCHAR clipboard_classname[] = {
+        '_','_','w','i','n','e','_','c','l','i','p','b','o','a','r','d',
+        '_','m','a','n','a','g','e','r',0
+    };
+    WNDCLASSW class;
+    HWND clipboard_hwnd;
+
+    memset(&class, 0, sizeof(class));
+    class.lpfnWndProc = clipboard_wndproc;
+    class.lpszClassName = clipboard_classname;
+
+    if (!RegisterClassW(&class) && GetLastError() != ERROR_CLASS_ALREADY_EXISTS)
+    {
+        ERR("could not register clipboard window class err %u\n", GetLastError());
+        return 0;
+    }
+
+    if (!(clipboard_hwnd = CreateWindowW(clipboard_classname, NULL, 0, 0, 0, 0, 0,
+                                         HWND_MESSAGE, 0, 0, NULL)))
+    {
+        ERR("failed to create clipboard window err %u\n", GetLastError());
+        return 0;
+    }
+
+    if (!AddClipboardFormatListener(clipboard_hwnd))
+        ERR("failed to set clipboard listener %u\n", GetLastError());
+
+    TRACE("clipboard_hwnd=%p\n", clipboard_hwnd);
+    return HandleToUlong(clipboard_hwnd);
+}
diff --git a/dlls/winewayland.drv/waylanddrv.h b/dlls/winewayland.drv/waylanddrv.h
index 3a132ba4e44..c0d23195bb9 100644
--- a/dlls/winewayland.drv/waylanddrv.h
+++ b/dlls/winewayland.drv/waylanddrv.h
@@ -78,6 +78,7 @@ enum wayland_window_message
     WM_WAYLAND_WINDOW_SURFACE_FLUSH,
     WM_WAYLAND_REMOTE_SURFACE,
     WM_WAYLAND_POINTER_CONFINEMENT_UPDATE,
+    WM_WAYLAND_CLIPBOARD_WINDOW_CREATE,
 };
 
 enum wayland_surface_role
@@ -232,6 +233,7 @@ struct wayland
     uint32_t last_button_serial;
     DWORD last_event_type;
     int event_notification_pipe[2];
+    HWND clipboard_hwnd;
     RECT cursor_clip;
 };
 
@@ -615,6 +617,7 @@ void wayland_invalidate_vulkan_objects(HWND hwnd) DECLSPEC_HIDDEN;
 void wayland_data_device_init(struct wayland_data_device *data_device,
                               struct wayland *wayland) DECLSPEC_HIDDEN;
 void wayland_data_device_deinit(struct wayland_data_device *data_device) DECLSPEC_HIDDEN;
+void wayland_data_device_ensure_clipboard_window(struct wayland *wayland) DECLSPEC_HIDDEN;
 
 /**********************************************************************
  *          Registry helpers
@@ -670,6 +673,7 @@ int wayland_shmfd_create(const char *name, int size) DECLSPEC_HIDDEN;
 void wayland_get_client_rect_in_win_coords(HWND hwnd, RECT *client_rect) DECLSPEC_HIDDEN;
 
 /**********************************************************************
+>>>>>>> 1956eea5224 (winewayland.drv: Create dedicated window to handle clipboard messages.)
  *          USER32 helpers
  */
 
@@ -724,6 +728,7 @@ static inline HWND get_focus(void)
 
 NTSTATUS waylanddrv_client_call(enum waylanddrv_client_func func, const void *params,
                                 ULONG size) DECLSPEC_HIDDEN;
+NTSTATUS waylanddrv_unix_clipboard_message(void *arg) DECLSPEC_HIDDEN;
 
 /**********************************************************************
  *          USER driver functions
diff --git a/dlls/winewayland.drv/waylanddrv_dll.h b/dlls/winewayland.drv/waylanddrv_dll.h
index 366b7e80c4b..fd99ac8e507 100644
--- a/dlls/winewayland.drv/waylanddrv_dll.h
+++ b/dlls/winewayland.drv/waylanddrv_dll.h
@@ -31,5 +31,6 @@
 extern NTSTATUS (CDECL *waylanddrv_unix_call)(enum waylanddrv_unix_func func, void *params) DECLSPEC_HIDDEN;
 #define WAYLANDDRV_UNIX_CALL(func, params) waylanddrv_unix_call(waylanddrv_unix_func_ ## func, params)
 
+NTSTATUS WINAPI waylanddrv_client_create_clipboard_window(void *arg, ULONG size);
 
 #endif /* __WINE_WAYLANDDRV_DLL_H */
diff --git a/dlls/winewayland.drv/waylanddrv_main.c b/dlls/winewayland.drv/waylanddrv_main.c
index c532e728ae2..92dc8e46937 100644
--- a/dlls/winewayland.drv/waylanddrv_main.c
+++ b/dlls/winewayland.drv/waylanddrv_main.c
@@ -112,6 +112,14 @@ struct wayland_thread_data *wayland_init_thread_data(void)
     set_queue_fd(&data->wayland);
     NtUserGetThreadInfo()->driver_data = data;
 
+    /* Create the clipboard window outside of thread init. We delay window
+     * creation since the thread init function may be invoked from within the
+     * context of a user32 function which holds the internal Wine user32 lock.
+     * In such a case creating the clipboard window would cause an internal
+     * user32 lock error. */
+    NtUserPostThreadMessage(data->wayland.thread_id,
+                            WM_WAYLAND_CLIPBOARD_WINDOW_CREATE, 0, 0);
+
     return data;
 }
 
@@ -192,6 +200,7 @@ static NTSTATUS waylanddrv_unix_init(void *arg)
 const unixlib_entry_t __wine_unix_call_funcs[] =
 {
     waylanddrv_unix_init,
+    waylanddrv_unix_clipboard_message,
 };
 
 C_ASSERT(ARRAYSIZE(__wine_unix_call_funcs) == waylanddrv_unix_func_count);
diff --git a/dlls/winewayland.drv/window.c b/dlls/winewayland.drv/window.c
index dbd1a4b767b..da74021c7eb 100644
--- a/dlls/winewayland.drv/window.c
+++ b/dlls/winewayland.drv/window.c
@@ -1669,6 +1669,9 @@ LRESULT WAYLAND_WindowMessage(HWND hwnd, UINT msg, WPARAM wp, LPARAM lp)
             wayland_surface_for_hwnd_unlock(wayland_surface);
         }
         break;
+    case WM_WAYLAND_CLIPBOARD_WINDOW_CREATE:
+        wayland_data_device_ensure_clipboard_window(thread_wayland());
+        break;
     default:
         FIXME("got window msg %x hwnd %p wp %lx lp %lx\n", msg, hwnd, wp, lp);
     }
-- 
2.36.1

