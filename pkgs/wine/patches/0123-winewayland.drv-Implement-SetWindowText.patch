From 59b96e7d3641e8db14787ea905b26e5b2e94519d Mon Sep 17 00:00:00 2001
From: Alexandros Frantzis <alexandros.frantzis@collabora.com>
Date: Wed, 15 Sep 2021 17:16:49 +0300
Subject: [PATCH 123/170] winewayland.drv: Implement SetWindowText.

Inform the Wayland compositor of the window title for toplevel windows,
transforming the title to the expected UTF-8 encoding.

Signed-off-by: Alexandros Frantzis <alexandros.frantzis@collabora.com>
---
 dlls/winewayland.drv/wayland_surface.c | 28 ++++++++++++++++++++++++++
 dlls/winewayland.drv/waylanddrv.h      |  3 +++
 dlls/winewayland.drv/waylanddrv_main.c |  1 +
 dlls/winewayland.drv/window.c          | 23 +++++++++++++++++++++
 4 files changed, 55 insertions(+)

diff --git a/dlls/winewayland.drv/wayland_surface.c b/dlls/winewayland.drv/wayland_surface.c
index e4c2176bcd9..2f47d888084 100644
--- a/dlls/winewayland.drv/wayland_surface.c
+++ b/dlls/winewayland.drv/wayland_surface.c
@@ -26,6 +26,7 @@
 
 #include "waylanddrv.h"
 #include "wine/debug.h"
+#include "wine/unicode.h"
 #include "ntgdi.h"
 #include "ntuser.h"
 
@@ -1561,3 +1562,30 @@ int wayland_surface_get_buffer_scale(struct wayland_surface *surface)
     TRACE("hwnd=%p (toplevel=%p) => scale=%d\n", surface->hwnd, toplevel->hwnd, scale);
     return scale;
 }
+
+/**********************************************************************
+ *          wayland_surface_set_title
+ */
+void wayland_surface_set_title(struct wayland_surface *surface, LPCWSTR text)
+{
+    DWORD text_len;
+    DWORD utf8_count;
+    char *utf8 = NULL;
+
+    if (!surface->xdg_toplevel)
+        return;
+
+    TRACE("surface=%p hwnd=%p text='%s'\n",
+          surface, surface->hwnd, wine_dbgstr_w(text));
+
+    text_len = (lstrlenW(text) + 1) * sizeof(WCHAR);
+
+    if (!RtlUnicodeToUTF8N(NULL, 0, &utf8_count, text, text_len) &&
+        (utf8 = malloc(utf8_count)))
+    {
+        RtlUnicodeToUTF8N(utf8, utf8_count, &utf8_count, text, text_len);
+        xdg_toplevel_set_title(surface->xdg_toplevel, utf8);
+    }
+
+    free(utf8);
+}
diff --git a/dlls/winewayland.drv/waylanddrv.h b/dlls/winewayland.drv/waylanddrv.h
index 3ffc9796c77..959b0107bfd 100644
--- a/dlls/winewayland.drv/waylanddrv.h
+++ b/dlls/winewayland.drv/waylanddrv.h
@@ -476,6 +476,7 @@ void wayland_surface_leave_output(struct wayland_surface *surface,
 void wayland_surface_set_wine_output(struct wayland_surface *surface,
                                      struct wayland_output *output) DECLSPEC_HIDDEN;
 int wayland_surface_get_buffer_scale(struct wayland_surface *surface) DECLSPEC_HIDDEN;
+void wayland_surface_set_title(struct wayland_surface *surface, LPCWSTR title) DECLSPEC_HIDDEN;
 
 /**********************************************************************
  *          Wayland native buffer
@@ -720,6 +721,8 @@ void WAYLAND_SetLayeredWindowAttributes(HWND hwnd, COLORREF key, BYTE alpha, DWO
 void WAYLAND_SetWindowRgn(HWND hwnd, HRGN hrgn, BOOL redraw) DECLSPEC_HIDDEN;
 void WAYLAND_SetWindowStyle(HWND hwnd, INT offset, STYLESTRUCT *style) DECLSPEC_HIDDEN;
 UINT WAYLAND_ShowWindow(HWND hwnd, INT cmd, RECT *rect, UINT swp) DECLSPEC_HIDDEN;
+void WAYLAND_SetWindowStyle(HWND hwnd, INT offset, STYLESTRUCT *style) DECLSPEC_HIDDEN;
+void WAYLAND_SetWindowText(HWND hwnd, LPCWSTR text) DECLSPEC_HIDDEN;
 LRESULT WAYLAND_SysCommand(HWND hwnd, WPARAM wparam, LPARAM lparam) DECLSPEC_HIDDEN;
 INT WAYLAND_ToUnicodeEx(UINT virt, UINT scan, const BYTE *state,
                         LPWSTR buf, int nchars, UINT flags, HKL hkl) DECLSPEC_HIDDEN;
diff --git a/dlls/winewayland.drv/waylanddrv_main.c b/dlls/winewayland.drv/waylanddrv_main.c
index 81788fd6d70..ffd471e906a 100644
--- a/dlls/winewayland.drv/waylanddrv_main.c
+++ b/dlls/winewayland.drv/waylanddrv_main.c
@@ -151,6 +151,7 @@ const struct user_driver_funcs waylanddrv_funcs =
     .pSetLayeredWindowAttributes = WAYLAND_SetLayeredWindowAttributes,
     .pSetWindowRgn = WAYLAND_SetWindowRgn,
     .pSetWindowStyle = WAYLAND_SetWindowStyle,
+    .pSetWindowText = WAYLAND_SetWindowText,
     .pShowWindow = WAYLAND_ShowWindow,
     .pSysCommand = WAYLAND_SysCommand,
     .pToUnicodeEx = WAYLAND_ToUnicodeEx,
diff --git a/dlls/winewayland.drv/window.c b/dlls/winewayland.drv/window.c
index b44b95e06a6..bb8038e81e7 100644
--- a/dlls/winewayland.drv/window.c
+++ b/dlls/winewayland.drv/window.c
@@ -547,6 +547,14 @@ static void wayland_win_data_update_wayland_surface(struct wayland_win_data *dat
                                           wayland, parent_surface);
     }
 
+    if (surface && surface->xdg_toplevel)
+    {
+        WCHAR text[1024];
+        if (!NtUserInternalGetWindowText(data->hwnd, text, ARRAY_SIZE(text)))
+            text[0] = 0;
+        wayland_surface_set_title(data->wayland_surface, text);
+    }
+
     if (data->wayland_surface != surface)
     {
         if (data->wayland_surface)
@@ -1112,6 +1120,21 @@ void WAYLAND_SetWindowStyle(HWND hwnd, INT offset, STYLESTRUCT *style)
     wayland_win_data_release(data);
 }
 
+/*****************************************************************
+ *		WAYLAND_SetWindowText
+ */
+void WAYLAND_SetWindowText(HWND hwnd, LPCWSTR text)
+{
+    struct wayland_surface *wsurface = wayland_surface_for_hwnd_lock(hwnd);
+
+    TRACE("hwnd=%p text=%s\n", hwnd, wine_dbgstr_w(text));
+
+    if (wsurface && wsurface->xdg_toplevel)
+        wayland_surface_set_title(wsurface, text);
+
+    wayland_surface_for_hwnd_unlock(wsurface);
+}
+
 /***********************************************************************
  *	     WAYLAND_SetLayeredWindowAttributes
  */
-- 
2.36.1

