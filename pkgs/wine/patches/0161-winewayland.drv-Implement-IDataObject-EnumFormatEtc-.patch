From e0bc6a92ab997f737f965a917423f967e4cb93e1 Mon Sep 17 00:00:00 2001
From: Alexandros Frantzis <alexandros.frantzis@collabora.com>
Date: Wed, 22 Sep 2021 18:36:38 +0300
Subject: [PATCH 161/170] winewayland.drv: Implement IDataObject::EnumFormatEtc
 for data offers.

For each mime type of the associated data offer we provid a FORMATETC
entry with the matching Windows clipboard format. We ensure that there
are no duplicate FORMATETC entries.

Signed-off-by: Alexandros Frantzis <alexandros.frantzis@collabora.com>
---
 dlls/winewayland.drv/Makefile.in              |  1 +
 dlls/winewayland.drv/unixlib.h                |  8 +++
 dlls/winewayland.drv/wayland_data_device.c    | 24 +++++++
 .../winewayland.drv/wayland_data_device_dll.c | 66 ++++++++++++++++++-
 dlls/winewayland.drv/waylanddrv.h             |  1 +
 dlls/winewayland.drv/waylanddrv_main.c        |  1 +
 6 files changed, 100 insertions(+), 1 deletion(-)

diff --git a/dlls/winewayland.drv/Makefile.in b/dlls/winewayland.drv/Makefile.in
index 30964b55a28..4635336f164 100644
--- a/dlls/winewayland.drv/Makefile.in
+++ b/dlls/winewayland.drv/Makefile.in
@@ -2,6 +2,7 @@ EXTRADEFS = -DWINE_NO_LONG_TYPES
 MODULE = winewayland.drv
 UNIXLIB = winewayland.so
 IMPORTS = user32 uuid
+DELAYIMPORTS = shell32
 EXTRAINCL = $(WAYLAND_CLIENT_CFLAGS) $(WAYLAND_CURSOR_CFLAGS) $(XKBCOMMON_CFLAGS) \
             $(GBM_CFLAGS) $(UDEV_CFLAGS) $(DRM_CFLAGS)
 EXTRALIBS = -lwin32u -lm $(WAYLAND_CLIENT_LIBS) $(WAYLAND_CURSOR_LIBS) \
diff --git a/dlls/winewayland.drv/unixlib.h b/dlls/winewayland.drv/unixlib.h
index ee2177a2f42..d1e4892b7d3 100644
--- a/dlls/winewayland.drv/unixlib.h
+++ b/dlls/winewayland.drv/unixlib.h
@@ -32,6 +32,7 @@ enum waylanddrv_unix_func
     waylanddrv_unix_func_init,
     waylanddrv_unix_func_clipboard_message,
     waylanddrv_unix_func_data_offer_accept_format,
+    waylanddrv_unix_func_data_offer_enum_formats,
     waylanddrv_unix_func_data_offer_import_format,
     waylanddrv_unix_func_count,
 };
@@ -56,6 +57,13 @@ struct waylanddrv_unix_data_offer_accept_format_params
     UINT format;
 };
 
+struct waylanddrv_unix_data_offer_enum_formats_params
+{
+    PTR32 data_offer;
+    UINT *formats;
+    UINT num_formats;
+};
+
 struct waylanddrv_unix_data_offer_import_format_params
 {
     PTR32 data_offer;
diff --git a/dlls/winewayland.drv/wayland_data_device.c b/dlls/winewayland.drv/wayland_data_device.c
index 44544cb9914..298300667f9 100644
--- a/dlls/winewayland.drv/wayland_data_device.c
+++ b/dlls/winewayland.drv/wayland_data_device.c
@@ -703,6 +703,30 @@ NTSTATUS waylanddrv_unix_data_offer_accept_format(void *arg)
     return STATUS_UNSUCCESSFUL;
 }
 
+NTSTATUS waylanddrv_unix_data_offer_enum_formats(void *arg)
+{
+    struct waylanddrv_unix_data_offer_enum_formats_params *p = arg;
+    struct wayland_data_offer *data_offer = UIntToPtr(p->data_offer);
+    char **mime;
+    UINT count = 0;
+
+    wl_array_for_each(mime, &data_offer->types)
+    {
+        struct wayland_data_device_format *format =
+            wayland_data_device_format_for_mime_type(*mime);
+        if (format)
+        {
+            if (p->formats && p->num_formats < count)
+                p->formats[count] = format->clipboard_format;
+            count++;
+        }
+    }
+
+    p->num_formats = count;
+
+    return STATUS_SUCCESS;
+}
+
 NTSTATUS waylanddrv_unix_data_offer_import_format(void *arg)
 {
     struct waylanddrv_unix_data_offer_import_format_params *p = arg;
diff --git a/dlls/winewayland.drv/wayland_data_device_dll.c b/dlls/winewayland.drv/wayland_data_device_dll.c
index 325c052c82a..ed585bd45e2 100644
--- a/dlls/winewayland.drv/wayland_data_device_dll.c
+++ b/dlls/winewayland.drv/wayland_data_device_dll.c
@@ -22,6 +22,7 @@
 
 #define COBJMACROS
 #include "objidl.h"
+#include "shlobj.h"
 
 #include "wine/debug.h"
 
@@ -206,12 +207,75 @@ static HRESULT WINAPI dataOfferDataObject_SetData(IDataObject *data_object,
     return E_NOTIMPL;
 }
 
+static BOOL formats_etc_contains_clipboard_format(FORMATETC *formats_etc,
+                                                  size_t formats_etc_count,
+                                                  UINT clipboard_format)
+{
+    size_t i;
+
+    for (i = 0; i < formats_etc_count; i++)
+        if (formats_etc[i].cfFormat == clipboard_format) return TRUE;
+
+    return FALSE;
+}
+
 static HRESULT WINAPI dataOfferDataObject_EnumFormatEtc(IDataObject *data_object,
                                                         DWORD direction,
                                                         IEnumFORMATETC **enum_format_etc)
 {
+    HRESULT hr;
+    FORMATETC *formats_etc;
+    size_t formats_etc_count = 0;
+    struct waylanddrv_unix_data_offer_enum_formats_params params;
+
     TRACE("(%p, %u, %p)\n", data_object, direction, enum_format_etc);
-    return E_NOTIMPL;
+
+    if (direction != DATADIR_GET)
+    {
+        FIXME("only the get direction is implemented\n");
+        return E_NOTIMPL;
+    }
+
+    params.data_offer = PtrToUint(data_object);
+    params.formats = NULL;
+    params.num_formats = 0;
+
+    WAYLANDDRV_UNIX_CALL(data_offer_enum_formats, &params);
+    params.formats = HeapAlloc(GetProcessHeap(), 0, params.num_formats * sizeof(UINT));
+    WAYLANDDRV_UNIX_CALL(data_offer_enum_formats, &params);
+    if (!params.formats)
+        return E_OUTOFMEMORY;
+
+    /* Allocate space for all offered mime types, although we may not use them all */
+    formats_etc = HeapAlloc(GetProcessHeap(), 0, params.num_formats * sizeof(FORMATETC));
+    if (!formats_etc)
+    {
+        HeapFree(GetProcessHeap(), 0, params.formats);
+        return E_OUTOFMEMORY;
+    }
+
+    for (int i = 0; i < params.num_formats; i++)
+    {
+        if (!formats_etc_contains_clipboard_format(formats_etc, formats_etc_count,
+                                                   params.formats[i]))
+        {
+            FORMATETC *current= &formats_etc[formats_etc_count];
+
+            current->cfFormat = params.formats[i];
+            current->ptd = NULL;
+            current->dwAspect = DVASPECT_CONTENT;
+            current->lindex = -1;
+            current->tymed = TYMED_HGLOBAL;
+
+            formats_etc_count += 1;
+        }
+    }
+
+    hr = SHCreateStdEnumFmtEtc(formats_etc_count, formats_etc, enum_format_etc);
+    HeapFree(GetProcessHeap(), 0, params.formats);
+    HeapFree(GetProcessHeap(), 0, formats_etc);
+
+    return hr;
 }
 
 static HRESULT WINAPI dataOfferDataObject_DAdvise(IDataObject *data_object,
diff --git a/dlls/winewayland.drv/waylanddrv.h b/dlls/winewayland.drv/waylanddrv.h
index 0ecab21c4f2..4c4555ba2c6 100644
--- a/dlls/winewayland.drv/waylanddrv.h
+++ b/dlls/winewayland.drv/waylanddrv.h
@@ -747,6 +747,7 @@ NTSTATUS waylanddrv_client_call(enum waylanddrv_client_func func, const void *pa
                                 ULONG size) DECLSPEC_HIDDEN;
 NTSTATUS waylanddrv_unix_clipboard_message(void *arg) DECLSPEC_HIDDEN;
 NTSTATUS waylanddrv_unix_data_offer_accept_format(void *arg) DECLSPEC_HIDDEN;
+NTSTATUS waylanddrv_unix_data_offer_enum_formats(void *arg) DECLSPEC_HIDDEN;
 NTSTATUS waylanddrv_unix_data_offer_import_format(void *arg) DECLSPEC_HIDDEN;
 
 /**********************************************************************
diff --git a/dlls/winewayland.drv/waylanddrv_main.c b/dlls/winewayland.drv/waylanddrv_main.c
index 1d0c202ce5b..f9750aaf2df 100644
--- a/dlls/winewayland.drv/waylanddrv_main.c
+++ b/dlls/winewayland.drv/waylanddrv_main.c
@@ -204,6 +204,7 @@ const unixlib_entry_t __wine_unix_call_funcs[] =
     waylanddrv_unix_init,
     waylanddrv_unix_clipboard_message,
     waylanddrv_unix_data_offer_accept_format,
+    waylanddrv_unix_data_offer_enum_formats,
     waylanddrv_unix_data_offer_import_format,
 };
 
-- 
2.36.1

