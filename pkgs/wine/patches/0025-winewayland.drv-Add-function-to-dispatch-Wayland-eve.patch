From c90729141531f51d626738d848a3c9cf89de4e8f Mon Sep 17 00:00:00 2001
From: Alexandros Frantzis <alexandros.frantzis@collabora.com>
Date: Thu, 2 Sep 2021 17:11:53 +0300
Subject: [PATCH 025/170] winewayland.drv: Add function to dispatch Wayland
 events.

Introduce a mechanism to dispatch Wayland events from a queue,
potentially also reading and queueing new events. This is similar to the
wayland-client wl_display_dispatch_queue() function, with the addition of
a timeout to wait for while waiting for new events to arrive.

Signed-off-by: Alexandros Frantzis <alexandros.frantzis@collabora.com>
---
 dlls/winewayland.drv/wayland.c    | 80 +++++++++++++++++++++++++++++++
 dlls/winewayland.drv/waylanddrv.h |  6 +++
 2 files changed, 86 insertions(+)

diff --git a/dlls/winewayland.drv/wayland.c b/dlls/winewayland.drv/wayland.c
index ccddbdb7e7a..c0d108c5d95 100644
--- a/dlls/winewayland.drv/wayland.c
+++ b/dlls/winewayland.drv/wayland.c
@@ -28,6 +28,8 @@
 
 #include "wine/debug.h"
 
+#include <errno.h>
+#include <poll.h>
 #include <stdlib.h>
 
 WINE_DEFAULT_DEBUG_CHANNEL(waylanddrv);
@@ -296,3 +298,81 @@ void wayland_notify_wine_monitor_change(void)
 
     wayland_mutex_unlock(&thread_wayland_mutex);
 }
+
+/**********************************************************************
+ *          wayland_dispatch_queue
+ *
+ * Dispatch events from the specified queue. If the queue is empty,
+ * wait for timeout_ms for events to arrive and then dispatch any events in
+ * the queue.
+ *
+ * Returns the number of events dispatched, -1 on error
+ */
+int wayland_dispatch_queue(struct wl_event_queue *queue, int timeout_ms)
+{
+    struct pollfd pfd = {0};
+    int ret;
+
+    TRACE("waiting for events...\n");
+
+    pfd.fd = wl_display_get_fd(process_wl_display);
+
+    if (wl_display_prepare_read_queue(process_wl_display, queue) == -1)
+    {
+        if ((ret = wl_display_dispatch_queue_pending(process_wl_display, queue)) == -1)
+            TRACE("... failed wl_display_dispatch_queue_pending errno=%d\n", errno);
+        TRACE("... done early\n");
+        return ret;
+    }
+
+    while (TRUE)
+    {
+        ret = wl_display_flush(process_wl_display);
+
+        if (ret != -1 || errno != EAGAIN)
+            break;
+
+        pfd.events = POLLOUT;
+        while ((ret = poll(&pfd, 1, timeout_ms)) == -1 && errno == EINTR) continue;
+
+        if (ret == -1)
+        {
+            TRACE("... failed poll out errno=%d\n", errno);
+            wl_display_cancel_read(process_wl_display);
+            return -1;
+        }
+    }
+
+    if (ret < 0 && errno != EPIPE)
+    {
+        wl_display_cancel_read(process_wl_display);
+        return -1;
+    }
+
+    pfd.events = POLLIN;
+    while ((ret = poll(&pfd, 1, timeout_ms)) == -1 && errno == EINTR) continue;
+
+    if (ret == -1 || !(pfd.revents & POLLIN))
+    {
+        TRACE("... failed poll errno=%d revents=0x%x\n",
+              ret == -1 ? errno : 0, pfd.revents);
+        wl_display_cancel_read(process_wl_display);
+        return -1;
+    }
+
+    if (wl_display_read_events(process_wl_display) == -1)
+    {
+        TRACE("... failed wl_display_read_events errno=%d\n", errno);
+        return -1;
+    }
+
+    if ((ret = wl_display_dispatch_queue_pending(process_wl_display, queue)) == -1)
+    {
+        TRACE("... failed wl_display_dispatch_queue_pending errno=%d\n", errno);
+        return -1;
+    }
+
+    TRACE("... done\n");
+
+    return ret;
+}
diff --git a/dlls/winewayland.drv/waylanddrv.h b/dlls/winewayland.drv/waylanddrv.h
index 1874f1728d4..7780119ddf3 100644
--- a/dlls/winewayland.drv/waylanddrv.h
+++ b/dlls/winewayland.drv/waylanddrv.h
@@ -170,6 +170,12 @@ void wayland_update_outputs_from_process(struct wayland *wayland) DECLSPEC_HIDDE
 struct wayland_output *wayland_output_get_by_wine_name(struct wayland *wayland,
                                                        LPCWSTR wine_name) DECLSPEC_HIDDEN;
 
+/**********************************************************************
+ *          Wayland event dispatch
+ */
+
+int wayland_dispatch_queue(struct wl_event_queue *queue, int timeout_ms) DECLSPEC_HIDDEN;
+
 /**********************************************************************
  *          Registry helpers
  */
-- 
2.36.1

