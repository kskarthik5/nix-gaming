From 86fa3390f8595d1d0cca990e867ad108578b5f5f Mon Sep 17 00:00:00 2001
From: Alexandros Frantzis <alexandros.frantzis@collabora.com>
Date: Tue, 29 Mar 2022 13:11:52 +0300
Subject: [PATCH 027/170] winewayland.drv: Add helper to create SHM backed file
 descriptors.

Signed-off-by: Alexandros Frantzis <alexandros.frantzis@collabora.com>
---
 dlls/winewayland.drv/Makefile.in     |  1 +
 dlls/winewayland.drv/wayland_shmfd.c | 86 ++++++++++++++++++++++++++++
 dlls/winewayland.drv/waylanddrv.h    |  1 +
 3 files changed, 88 insertions(+)
 create mode 100644 dlls/winewayland.drv/wayland_shmfd.c

diff --git a/dlls/winewayland.drv/Makefile.in b/dlls/winewayland.drv/Makefile.in
index c2d8190c86d..e84e8c79f24 100644
--- a/dlls/winewayland.drv/Makefile.in
+++ b/dlls/winewayland.drv/Makefile.in
@@ -17,6 +17,7 @@ C_SRCS = \
 	wayland_mutex.c \
 	wayland_native_buffer.c \
 	wayland_output.c \
+	wayland_shmfd.c \
 	waylanddrv_main.c \
 	window.c \
 
diff --git a/dlls/winewayland.drv/wayland_shmfd.c b/dlls/winewayland.drv/wayland_shmfd.c
new file mode 100644
index 00000000000..b2e69be33e4
--- /dev/null
+++ b/dlls/winewayland.drv/wayland_shmfd.c
@@ -0,0 +1,86 @@
+/*
+ * Wayland SHM fd
+ *
+ * Copyright 2022 Alexandros Frantzis for Collabora Ltd
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+#if 0
+#pragma makedep unix
+#endif
+
+#include "config.h"
+
+/* For memfd_create */
+#ifndef _GNU_SOURCE
+#define _GNU_SOURCE
+#endif
+
+#include <errno.h>
+#include <fcntl.h>
+#include <sys/mman.h>
+#include <unistd.h>
+
+#include "waylanddrv.h"
+
+static int fd_resize(int fd, off_t size)
+{
+    /*
+     * Filesystems that do support fallocate will return EINVAL or
+     * EOPNOTSUPP. In this case we need to fall back to ftruncate
+     */
+    errno = posix_fallocate(fd, 0, size);
+    if (errno == 0)
+        return 0;
+    else if (errno != EINVAL && errno != EOPNOTSUPP)
+        return -1;
+    if (ftruncate(fd, size) < 0)
+        return -1;
+
+    return 0;
+}
+
+/**********************************************************************
+ *          wayland_shmfd_create
+ *
+ * Creates a file descriptor representing an anonymous SHM region.
+ */
+int wayland_shmfd_create(const char *name, int size)
+{
+    int fd = memfd_create(name, MFD_CLOEXEC | MFD_ALLOW_SEALING);
+
+    if (fd >= 0)
+    {
+        /* We can add this seal before calling posix_fallocate(), as
+         * the file is currently zero-sized anyway.
+         *
+         * There is also no need to check for the return value, we
+         * couldn't do anything with it anyway.
+         */
+        fcntl(fd, F_ADD_SEALS, F_SEAL_SHRINK | F_SEAL_SEAL);
+    }
+
+    while (TRUE)
+    {
+        int ret = fd_resize(fd, size);
+        if (ret == 0) break;
+        if (ret < 0 && errno == EINTR) continue;
+        close(fd);
+        return -1;
+    }
+
+    return fd;
+}
diff --git a/dlls/winewayland.drv/waylanddrv.h b/dlls/winewayland.drv/waylanddrv.h
index 6478ce9b6e5..e7e48dba3a8 100644
--- a/dlls/winewayland.drv/waylanddrv.h
+++ b/dlls/winewayland.drv/waylanddrv.h
@@ -216,6 +216,7 @@ size_t unicode_to_ascii_maybe_z(char *dst, size_t dst_max_chars,
 size_t ascii_to_unicode_z(WCHAR *dst, size_t dst_max_chars,
                           const char *src, size_t src_max_chars) DECLSPEC_HIDDEN;
 LONG unicode_z_to_long(LPCWSTR s, LPWSTR *end, INT base) DECLSPEC_HIDDEN;
+int wayland_shmfd_create(const char *name, int size) DECLSPEC_HIDDEN;
 
 /**********************************************************************
  *          USER32 helpers
-- 
2.36.1

