diff --git a/dlls/winepulse.drv/Makefile.in b/dlls/winepulse.drv/Makefile.in
index 84fb540..068eed0 100644
--- a/dlls/winepulse.drv/Makefile.in
+++ b/dlls/winepulse.drv/Makefile.in
@@ -1,9 +1,10 @@
 MODULE    = winepulse.drv
-IMPORTS   = dxguid uuid winmm user32 advapi32 ole32
-EXTRALIBS = $(PULSE_LIBS) $(PTHREAD_LIBS)
-EXTRAINCL = $(PULSE_CFLAGS)
+UNIXLIB   = winepulse.so
+IMPORTS   = dxguid uuid winmm user32 advapi32 ole32 version
+UNIX_LIBS    = $(PULSE_LIBS) $(PTHREAD_LIBS) -lm
+UNIX_CFLAGS  = $(PULSE_CFLAGS)
 
 EXTRADLLFLAGS = -mcygwin
 
 C_SRCS = \
-	mmdevdrv.c
+	mmdevdrv.c 

--- a/include/wine/test.h
+++ b/include/wine/test.h
@@ -28,6 +28,13 @@
 #include <winbase.h>
 #include <wine/debug.h>
 
+#ifdef __WINE_CONFIG_H
+#error config.h should not be used in Wine tests
+#endif
+#ifdef __WINE_WINE_UNICODE_H
+#error wine/unicode.h should not be used in Wine tests
+#endif
+
 #ifndef INVALID_FILE_ATTRIBUTES
 #define INVALID_FILE_ATTRIBUTES  (~0u)
 #endif
--- /dev/null
+++ b/include/wine/unicode.h
@@ -0,0 +1,178 @@
+/*
+ * Wine internal Unicode definitions
+ *
+ * Copyright 2000 Alexandre Julliard
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+#if 0
+#pragma makedep install
+#endif
+
+#ifndef __WINE_WINE_UNICODE_H
+#define __WINE_WINE_UNICODE_H
+
+#include <stdarg.h>
+
+#include <windef.h>
+#include <winbase.h>
+#include <winnls.h>
+#include <winternl.h>
+
+#ifdef __WINE_USE_MSVCRT
+#error This file should not be used with msvcrt headers
+#endif
+
+#ifndef WINE_UNICODE_INLINE
+#define WINE_UNICODE_INLINE static FORCEINLINE
+#endif
+
+WINE_UNICODE_INLINE WCHAR tolowerW( WCHAR ch )
+{
+    return RtlDowncaseUnicodeChar( ch );
+}
+
+WINE_UNICODE_INLINE WCHAR toupperW( WCHAR ch )
+{
+    return RtlUpcaseUnicodeChar( ch );
+}
+
+WINE_UNICODE_INLINE int isspaceW( WCHAR wc )
+{
+    unsigned short type;
+    GetStringTypeW( CT_CTYPE1, &wc, 1, &type );
+    return type & C1_SPACE;
+}
+
+WINE_UNICODE_INLINE unsigned int strlenW( const WCHAR *str )
+{
+    const WCHAR *s = str;
+    while (*s) s++;
+    return s - str;
+}
+
+WINE_UNICODE_INLINE WCHAR *strcpyW( WCHAR *dst, const WCHAR *src )
+{
+    WCHAR *p = dst;
+    while ((*p++ = *src++));
+    return dst;
+}
+
+WINE_UNICODE_INLINE WCHAR *strcatW( WCHAR *dst, const WCHAR *src )
+{
+    strcpyW( dst + strlenW(dst), src );
+    return dst;
+}
+
+WINE_UNICODE_INLINE WCHAR *strrchrW( const WCHAR *str, WCHAR ch )
+{
+    WCHAR *ret = NULL;
+    do { if (*str == ch) ret = (WCHAR *)(ULONG_PTR)str; } while (*str++);
+    return ret;
+}
+
+WINE_UNICODE_INLINE int strcmpiW( const WCHAR *str1, const WCHAR *str2 )
+{
+    for (;;)
+    {
+        int ret = tolowerW(*str1) - tolowerW(*str2);
+        if (ret || !*str1) return ret;
+        str1++;
+        str2++;
+    }
+}
+
+WINE_UNICODE_INLINE int strncmpiW( const WCHAR *str1, const WCHAR *str2, int n )
+{
+    int ret = 0;
+    for ( ; n > 0; n--, str1++, str2++)
+        if ((ret = tolowerW(*str1) - tolowerW(*str2)) || !*str1) break;
+    return ret;
+}
+
+WINE_UNICODE_INLINE LONG strtolW( LPCWSTR s, LPWSTR *end, INT base )
+{
+    BOOL negative = FALSE, empty = TRUE;
+    LONG ret = 0;
+
+    if (base < 0 || base == 1 || base > 36) return 0;
+    if (end) *end = (WCHAR *)s;
+    while (isspaceW(*s)) s++;
+
+    if (*s == '-')
+    {
+        negative = TRUE;
+        s++;
+    }
+    else if (*s == '+') s++;
+
+    if ((base == 0 || base == 16) && s[0] == '0' && (s[1] == 'x' || s[1] == 'X'))
+    {
+        base = 16;
+        s += 2;
+    }
+    if (base == 0) base = s[0] != '0' ? 10 : 8;
+
+    while (*s)
+    {
+        int v;
+
+        if ('0' <= *s && *s <= '9') v = *s - '0';
+        else if ('A' <= *s && *s <= 'Z') v = *s - 'A' + 10;
+        else if ('a' <= *s && *s <= 'z') v = *s - 'a' + 10;
+        else break;
+        if (v >= base) break;
+        if (negative) v = -v;
+        s++;
+        empty = FALSE;
+
+        if (!negative && (ret > MAXLONG / base || ret * base > MAXLONG - v))
+            ret = MAXLONG;
+        else if (negative && (ret < (LONG)MINLONG / base || ret * base < (LONG)(MINLONG - v)))
+            ret = MINLONG;
+        else
+            ret = ret * base + v;
+    }
+
+    if (end && !empty) *end = (WCHAR *)s;
+    return ret;
+}
+
+NTSYSAPI int __cdecl _vsnwprintf(WCHAR*,size_t,const WCHAR*,__ms_va_list);
+
+static inline int WINAPIV snprintfW( WCHAR *str, size_t len, const WCHAR *format, ...)
+{
+    int retval;
+    __ms_va_list valist;
+    __ms_va_start(valist, format);
+    retval = _vsnwprintf(str, len, format, valist);
+    __ms_va_end(valist);
+    return retval;
+}
+
+static inline int WINAPIV sprintfW( WCHAR *str, const WCHAR *format, ...)
+{
+    int retval;
+    __ms_va_list valist;
+    __ms_va_start(valist, format);
+    retval = _vsnwprintf(str, MAXLONG, format, valist);
+    __ms_va_end(valist);
+    return retval;
+}
+
+#undef WINE_UNICODE_INLINE
+
+#endif  /* __WINE_WINE_UNICODE_H */
--- a/include/Makefile.in
+++ b/include/Makefile.in
@@ -850,6 +850,7 @@
 	wine/strmbase.h \
 	wine/svcctl.idl \
 	wine/test.h \
+	wine/unicode.h \
 	wine/unixlib.h \
 	wine/vulkan.h \
 	wine/vulkan_driver.h \


diff --git a/libs/uuid/uuid.c b/libs/uuid/uuid.c
index ce97520..1ba0397 100644
--- a/libs/uuid/uuid.c
+++ b/libs/uuid/uuid.c
@@ -92,7 +92,6 @@ DEFINE_GUID(GUID_NULL,0,0,0,0,0,0,0,0,0,0,0);
 #include "comsvcs.h"
 #include "directmanipulation.h"
 #include "devguid.h"
-#include "propkey.h"
 
 #define __WINE_INIT_NPI_MODULEID
 #include "netiodef.h"

diff --git a/tools/winegcc/winegcc.c b/tools/winegcc/winegcc.c
index a850cce..5f2098d 100644
--- a/tools/winegcc/winegcc.c
+++ b/tools/winegcc/winegcc.c
@@ -1554,6 +1554,8 @@ int main(int argc, char **argv)
     memset(&opts, 0, sizeof(opts));
     opts.target = init_argv0_target( argv[0] );
     opts.pic = 1;
+    
+    if (is_pe_target( &opts )) opts.use_msvcrt = 1;
 
     /* determine the processor type */
     if (strendswith(argv[0], "winecpp")) opts.processor = proc_cpp;
@@ -1984,8 +1986,6 @@ int main(int argc, char **argv)
     if (opts.processor == proc_cpp) linking = 0;
     if (linking == -1) error("Static linking is not supported\n");
 
-    if (is_pe_target( &opts )) opts.use_msvcrt = 1;
-
     if (opts.files.count == 0 && !opts.fake_module) forward(&opts);
     else if (linking) build(&opts);
     else compile(&opts, lang);
     
diff --git a/tools/makedep.c b/tools/makedep.c
index 8938089..255aaa1 100644
--- a/tools/makedep.c
+++ b/tools/makedep.c
@@ -198,6 +198,7 @@
     const char     *staticlib;
     const char     *importlib;
     const char     *unixlib;
+    int             use_msvcrt;
     int             data_only;
     int             is_win16;
     int             is_exe;
@@ -598,17 +599,6 @@
 
 
 /*******************************************************************
- *         is_using_msvcrt
- *
- * Check if the files of a makefile use msvcrt by default.
- */
-static int is_using_msvcrt( struct makefile *make )
-{
-    return make->module || make->testdll;
-}
-
-
-/*******************************************************************
  *         arch_module_name
  */
 static char *arch_module_name( const char *module, unsigned int arch )
@@ -866,7 +856,7 @@
     file->basename = xstrdup( filename ? filename : name );
     file->filename = obj_dir_path( make, file->basename );
     file->file->flags = FLAG_GENERATED;
-    file->use_msvcrt = is_using_msvcrt( make );
+    file->use_msvcrt = make->use_msvcrt;
     list_add_tail( &make->sources, &file->entry );
     if (make == include_makefile)
     {
@@ -1615,7 +1605,7 @@
 
     memset( file, 0, sizeof(*file) );
     file->name = xstrdup(name);
-    file->use_msvcrt = is_using_msvcrt( make );
+    file->use_msvcrt = make->use_msvcrt;
     file->is_external = !!make->extlib;
     list_add_tail( &make->sources, &file->entry );
     if (make == include_makefile)
@@ -1814,12 +1804,13 @@
     unsigned int i, arch;
     struct incl_file *source, *next, *file, *dlldata = NULL;
     struct strarray objs = get_expanded_make_var_array( make, "EXTRA_OBJS" );
+    int multiarch = archs.count > 1 && make->use_msvcrt;
 
     LIST_FOR_EACH_ENTRY_SAFE( source, next, &make->sources, struct incl_file, entry )
     {
         for (arch = 0; arch < archs.count; arch++)
         {
-            if (!is_multiarch( arch )) continue;
+            if (!arch != !multiarch) continue;
             if (source->file->flags & FLAG_IDL_CLIENT)
             {
                 file = add_generated_source( make, replace_extension( source->name, ".idl", "_c.c" ), NULL, arch );
@@ -1923,7 +1914,7 @@
     {
         for (arch = 0; arch < archs.count; arch++)
         {
-            if (!is_multiarch( arch )) continue;
+            if (!arch != !multiarch) continue;
             file = add_generated_source( make, "testlist.o", "testlist.c", arch );
             add_dependency( file->file, "wine/test.h", INCL_NORMAL );
             add_all_includes( make, file, file->file );
@@ -2177,6 +2168,7 @@
  */
 static const char *get_default_crt( const struct makefile *make )
 {
+    if (!make->use_msvcrt) return NULL;
     if (make->module && is_crt_module( make->module )) return NULL;  /* don't add crt import to crt dlls */
     return !make->testdll && (!make->staticlib || make->extlib) ? "ucrtbase" : "msvcrt";
 }
@@ -2366,7 +2358,6 @@
         strarray_add( &ret, strmake( "-I%s", root_src_dir_path( "include/msvcrt" )));
         for (i = 0; i < make->include_paths.count; i++)
             strarray_add( &ret, strmake( "-I%s", make->include_paths.str[i] ));
-        strarray_add( &ret, get_crt_define( make ));
     }
     strarray_addall( &ret, make->define_args );
     strarray_addall( &ret, get_expanded_file_local_var( make, obj, "EXTRADEFS" ));
@@ -2427,9 +2418,7 @@
         output_filename( tools_path( make, "winebuild" ));
     }
     output_filenames( target_flags[arch] );
-    if (arch) return;
-    output_filename( "-mno-cygwin" );
-    output_filenames( lddll_flags );
+    if (!arch) output_filenames( lddll_flags );
 }
 
 
@@ -2822,6 +2811,7 @@
     struct strarray multiarch_targets[MAX_ARCHS] = { empty_strarray };
     const char *dest;
     unsigned int i, arch;
+    int multiarch;
 
     if (find_include_file( make, strmake( "%s.h", obj ))) source->file->flags |= FLAG_IDL_HEADER;
     if (!source->file->flags) return;
@@ -2845,9 +2835,10 @@
     for (i = 0; i < ARRAY_SIZE(idl_outputs); i++)
     {
         if (!(source->file->flags & idl_outputs[i].flag)) continue;
+        multiarch = (make->use_msvcrt && archs.count > 1);
         for (arch = 0; arch < archs.count; arch++)
         {
-            if (!is_multiarch( arch )) continue;
+            if (!arch != !multiarch) continue;
             dest = strmake( "%s%s%s", arch_dirs[arch], obj, idl_outputs[i].ext );
             if (!find_src_file( make, dest )) strarray_add( &make->clean_files, dest );
             strarray_add( &multiarch_targets[arch], dest );
@@ -3128,13 +3119,13 @@
     if (arch)
     {
         if (source->file->flags & FLAG_C_UNIX) return;
-        if (!is_using_msvcrt( make ) && !make->staticlib && !(source->file->flags & FLAG_C_IMPLIB)) return;
+        if (!make->use_msvcrt && !make->staticlib && !(source->file->flags & FLAG_C_IMPLIB)) return;
     }
     else if (source->file->flags & FLAG_C_UNIX)
     {
         if (!*dll_ext) return;
     }
-    else if (archs.count > 1 && is_using_msvcrt( make ) &&
+    else if (archs.count > 1 && make->use_msvcrt &&
              !(source->file->flags & FLAG_C_IMPLIB) &&
              (!make->staticlib || make->extlib)) return;
 
@@ -3320,6 +3311,12 @@
         strarray_addall( &all_libs, add_import_libs( make, &dep_libs, make->delayimports, IMPORT_TYPE_DELAYED, arch ));
         strarray_addall( &all_libs, add_import_libs( make, &dep_libs, default_imports, IMPORT_TYPE_DEFAULT, arch ) );
 
+        if (!make->use_msvcrt)
+        {
+            strarray_addall( &all_libs, get_expanded_make_var_array( make, "UNIX_LIBS" ));
+            strarray_addall( &all_libs, libs );
+        }
+
         if (delay_load_flags[arch])
         {
             for (i = 0; i < make->delayimports.count; i++)
@@ -3549,7 +3546,7 @@
     output( ": %s", obj_dir_path( make, testmodule ));
     if (parent)
     {
-        char *parent_module = arch_module_name( make->testdll, arch );
+        char *parent_module = arch_module_name( make->testdll, parent->use_msvcrt ? arch : 0 );
         output_filename( obj_dir_path( parent, parent_module ));
         if (parent->unixlib) output_filename( obj_dir_path( parent, parent->unixlib ));
     }
@@ -3800,7 +3797,12 @@
     }
     else if (make->module)
     {
-        for (arch = 0; arch < archs.count; arch++) if (is_multiarch( arch )) output_module( make, arch );
+        if (!make->use_msvcrt) output_module( make, 0 );
+        else
+        {
+            for (arch = 0; arch < archs.count; arch++)
+                if (is_multiarch( arch )) output_module( make, arch );
+        }
         if (make->unixlib) output_unix_lib( make );
         if (make->importlib) for (arch = 0; arch < archs.count; arch++) output_import_lib( make, arch );
         if (make->is_exe && !make->is_win16 && *dll_ext && strendswith( make->module, ".exe" ))
@@ -4242,9 +4244,13 @@
     }
     make->is_win16   = strarray_exists( &make->extradllflags, "-m16" );
     make->data_only  = strarray_exists( &make->extradllflags, "-Wb,--data-only" );
+    make->use_msvcrt = (make->module || make->testdll || make->is_win16) &&
+                       !strarray_exists( &make->extradllflags, "-mcygwin" );
     make->is_exe     = strarray_exists( &make->extradllflags, "-mconsole" ) ||
                        strarray_exists( &make->extradllflags, "-mwindows" );
 
+    if (make->use_msvcrt) strarray_add_uniq( &make->extradllflags, "-mno-cygwin" );
+
     if (make->module)
     {
         /* add default install rules if nothing was specified */
@@ -4301,6 +4307,8 @@
 
     add_generated_sources( make );
 
+    if (make->use_msvcrt) strarray_add( &make->define_args, get_crt_define( make ));
+
     LIST_FOR_EACH_ENTRY( file, &make->includes, struct incl_file, entry ) parse_file( make, file, 0 );
     LIST_FOR_EACH_ENTRY( file, &make->sources, struct incl_file, entry ) get_dependencies( file, file );
 
