diff --git a/dlls/winealsa.drv/mmdevdrv.c b/dlls/winealsa.drv/mmdevdrv.c
index cba96cd..64b5058 100644
--- a/dlls/winealsa.drv/mmdevdrv.c
+++ b/dlls/winealsa.drv/mmdevdrv.c
@@ -55,6 +55,14 @@ unixlib_handle_t alsa_handle = 0;
 static const REFERENCE_TIME DefaultPeriod = 100000;
 static const REFERENCE_TIME MinimumPeriod = 50000;
 
+int GetAudioEnv(char const* env, int def) {
+  char* val = getenv(env);
+  if (val) {
+    return atoi(val);
+  }
+  return def;
+}
+
 struct ACImpl;
 typedef struct ACImpl ACImpl;
 
@@ -710,9 +718,8 @@ static HRESULT WINAPI AudioClient_Initialize(IAudioClient3 *iface,
     }
 
     if(mode == AUDCLNT_SHAREMODE_SHARED){
-        period = DefaultPeriod;
-        if( duration < 3 * period)
-            duration = 3 * period;
+        period = GetAudioEnv("STAGING_AUDIO_DEFAULT_PERIOD", DefaultPeriod);
+        duration = GetAudioEnv("STAGING_AUDIO_DURATION", 100000);
     }else{
         if(fmt->wFormatTag == WAVE_FORMAT_EXTENSIBLE){
             if(((WAVEFORMATEXTENSIBLE*)fmt)->dwChannelMask == 0 ||
@@ -720,9 +727,11 @@ static HRESULT WINAPI AudioClient_Initialize(IAudioClient3 *iface,
                 return AUDCLNT_E_UNSUPPORTED_FORMAT;
         }
 
-        if(!period)
-            period = DefaultPeriod; /* not minimum */
-        if(period < MinimumPeriod || period > 5000000)
+        if(!period){
+            period = GetAudioEnv("STAGING_AUDIO_DEFAULT_PERIOD", DefaultPeriod); /* not minimum */
+            duration = GetAudioEnv("STAGING_AUDIO_DURATION", 100000);
+        }
+        if(period < GetAudioEnv("STAGING_AUDIO_MINIMUM_PERIOD", MinimumPeriod) || period > 5000000)
             return AUDCLNT_E_INVALID_DEVICE_PERIOD;
         if(duration > 20000000) /* the smaller the period, the lower this limit */
             return AUDCLNT_E_BUFFER_SIZE_ERROR;
@@ -931,9 +940,9 @@ static HRESULT WINAPI AudioClient_GetDevicePeriod(IAudioClient3 *iface,
         return E_POINTER;
 
     if(defperiod)
-        *defperiod = DefaultPeriod;
+        *defperiod = GetAudioEnv("STAGING_AUDIO_DEFAULT_PERIOD", DefaultPeriod);
     if(minperiod)
-        *minperiod = DefaultPeriod;
+        *minperiod = GetAudioEnv("STAGING_AUDIO_MINIMUM_PERIOD", MinimumPeriod);
 
     return S_OK;
 }
diff --git a/dlls/winealsa.drv/alsa.c b/dlls/winealsa.drv/alsa.c
index b916066..1ef3099 100644
--- a/dlls/winealsa.drv/alsa.c
+++ b/dlls/winealsa.drv/alsa.c
@@ -84,6 +84,14 @@ struct alsa_stream
 
 #define                     EXTRA_SAFE_RT   40000
 
+int GetAudioEnv(char const* env, int def) {
+  char* val = getenv(env);
+  if (val) {
+    return atoi(val);
+  }
+  return def;
+}
+
 static const WCHAR drv_keyW[] = {'S','o','f','t','w','a','r','e','\\',
     'W','i','n','e','\\','D','r','i','v','e','r','s','\\',
     'w','i','n','e','a','l','s','a','.','d','r','v'};

@@ -938,7 +946,7 @@ static NTSTATUS create_stream(void *args)
     if(params->share == AUDCLNT_SHAREMODE_EXCLUSIVE)
         stream->bufsize_frames -= stream->bufsize_frames % stream->mmdev_period_frames;
     stream->hidden_frames = stream->alsa_period_frames + stream->mmdev_period_frames +
-        muldiv(params->fmt->nSamplesPerSec, EXTRA_SAFE_RT, 10000000);
+        muldiv(params->fmt->nSamplesPerSec, GetAudioEnv("STAGING_AUDIO_EXTRA_SAFE_RT", EXTRA_SAFE_RT), 10000000);
     /* leave no less than about 1.33ms or 256 bytes of data after a rewind */
     stream->safe_rewind_frames = max(256 / params->fmt->nBlockAlign, muldiv(133, params->fmt->nSamplesPerSec, 100000));
 
