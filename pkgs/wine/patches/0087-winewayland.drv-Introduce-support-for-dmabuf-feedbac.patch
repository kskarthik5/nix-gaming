From 11f631bef5fa6ccdb6d989ddd31f904e31a3da9a Mon Sep 17 00:00:00 2001
From: Leandro Ribeiro <leandro.ribeiro@collabora.com>
Date: Fri, 29 Apr 2022 16:23:08 -0300
Subject: [PATCH 087/170] winewayland.drv: Introduce support for dmabuf
 feedback.

This bumps dmabuf supported version up to 4, and binds to the dmabuf
feedback interface.

For now we only care about the main device from the default dmabuf
feedback, but in the future we are going to use this to get optimal
buffer allocation parameters.

Signed-off-by: Leandro Ribeiro <leandro.ribeiro@collabora.com>
---
 dlls/winewayland.drv/wayland.c        |  2 +-
 dlls/winewayland.drv/wayland_dmabuf.c | 97 ++++++++++++++++++++++++++-
 dlls/winewayland.drv/waylanddrv.h     |  8 +++
 3 files changed, 105 insertions(+), 2 deletions(-)

diff --git a/dlls/winewayland.drv/wayland.c b/dlls/winewayland.drv/wayland.c
index ffde4ad54a9..5b151959fd0 100644
--- a/dlls/winewayland.drv/wayland.c
+++ b/dlls/winewayland.drv/wayland.c
@@ -138,7 +138,7 @@ static void registry_handle_global(void *data, struct wl_registry *registry,
     {
         struct zwp_linux_dmabuf_v1 *zwp_linux_dmabuf_v1 =
             wl_registry_bind(registry, id, &zwp_linux_dmabuf_v1_interface,
-                             version < 3 ? version : 3);
+                             version < 4 ? version : 4);
         wayland_dmabuf_init(&wayland->dmabuf, zwp_linux_dmabuf_v1);
     }
 
diff --git a/dlls/winewayland.drv/wayland_dmabuf.c b/dlls/winewayland.drv/wayland_dmabuf.c
index c50831b103c..016b447b24a 100644
--- a/dlls/winewayland.drv/wayland_dmabuf.c
+++ b/dlls/winewayland.drv/wayland_dmabuf.c
@@ -112,15 +112,108 @@ static const struct zwp_linux_dmabuf_v1_listener dmabuf_listener = {
     dmabuf_modifiers
 };
 
+/**********************************************************************
+ *          zwp_linux_dmabuf_feedback_v1 handling
+ */
+static void dmabuf_feedback_main_device(void *data,
+                                        struct zwp_linux_dmabuf_feedback_v1 *zwp_linux_dmabuf_feedback_v1,
+                                        struct wl_array *device)
+{
+    struct wayland_dmabuf_feedback *feedback = data;
+
+    if (device->size != sizeof(feedback->main_device))
+        return;
+
+    memcpy(&feedback->main_device, device->data, device->size);
+}
+
+static void dmabuf_feedback_format_table(void *data,
+                                         struct zwp_linux_dmabuf_feedback_v1 *zwp_linux_dmabuf_feedback_v1,
+                                         int32_t fd, uint32_t size)
+{
+    /* ignore for now */
+}
+
+static void dmabuf_feedback_tranche_target_device(void *data,
+                                                  struct zwp_linux_dmabuf_feedback_v1 *zwp_linux_dmabuf_feedback_v1,
+                                                  struct wl_array *device)
+{
+    /* ignore for now */
+}
+
+static void dmabuf_feedback_tranche_formats(void *data,
+                                            struct zwp_linux_dmabuf_feedback_v1 *zwp_linux_dmabuf_feedback_v1,
+                                            struct wl_array *indices)
+{
+    /* ignore for now */
+}
+
+static void dmabuf_feedback_tranche_flags(void *data,
+                                          struct zwp_linux_dmabuf_feedback_v1 *zwp_linux_dmabuf_feedback_v1,
+                                          uint32_t flags)
+{
+    /* ignore for now */
+}
+
+static void dmabuf_feedback_tranche_done(void *data,
+                                         struct zwp_linux_dmabuf_feedback_v1 *zwp_linux_dmabuf_feedback_v1)
+{
+    /* ignore for now */
+}
+
+static void dmabuf_feedback_done(void *data,
+                                 struct zwp_linux_dmabuf_feedback_v1 *zwp_linux_dmabuf_feedback_v1)
+{
+    struct wayland_dmabuf_feedback *feedback = data;
+
+    zwp_linux_dmabuf_feedback_v1_destroy(feedback->zwp_linux_dmabuf_feedback_v1);
+    feedback->zwp_linux_dmabuf_feedback_v1 = NULL;
+}
+
+static const struct zwp_linux_dmabuf_feedback_v1_listener dmabuf_feedback_listener =
+{
+    .main_device = dmabuf_feedback_main_device,
+    .format_table = dmabuf_feedback_format_table,
+    .tranche_target_device = dmabuf_feedback_tranche_target_device,
+    .tranche_formats = dmabuf_feedback_tranche_formats,
+    .tranche_flags = dmabuf_feedback_tranche_flags,
+    .tranche_done = dmabuf_feedback_tranche_done,
+    .done = dmabuf_feedback_done,
+};
+
+static void wayland_dmabuf_feedback_init(struct wayland_dmabuf_feedback *feedback,
+                                         struct zwp_linux_dmabuf_v1 *zwp_linux_dmabuf_v1)
+{
+    feedback->zwp_linux_dmabuf_feedback_v1 =
+        zwp_linux_dmabuf_v1_get_default_feedback(zwp_linux_dmabuf_v1);
+    zwp_linux_dmabuf_feedback_v1_add_listener(feedback->zwp_linux_dmabuf_feedback_v1,
+                                              &dmabuf_feedback_listener, feedback);
+}
+
+static void wayland_dmabuf_feedback_deinit(struct wayland_dmabuf_feedback *feedback)
+{
+    if (feedback->zwp_linux_dmabuf_feedback_v1)
+        zwp_linux_dmabuf_feedback_v1_destroy(feedback->zwp_linux_dmabuf_feedback_v1);
+}
+
 /***********************************************************************
  *           wayland_dmabuf_init
  */
 void wayland_dmabuf_init(struct wayland_dmabuf *dmabuf,
                          struct zwp_linux_dmabuf_v1 *zwp_linux_dmabuf_v1)
 {
+    uint32_t dmabuf_version =
+        wl_proxy_get_version((struct wl_proxy *)zwp_linux_dmabuf_v1);
+
     dmabuf->zwp_linux_dmabuf_v1 = zwp_linux_dmabuf_v1;
     wl_list_init(&dmabuf->formats);
-    zwp_linux_dmabuf_v1_add_listener(zwp_linux_dmabuf_v1, &dmabuf_listener, dmabuf);
+
+    /* If the compositor supports dmabuf feedback events, it must not send
+     * format and modifier events, so don't even listen for them in that case. */
+    if (dmabuf_version >= ZWP_LINUX_DMABUF_V1_GET_DEFAULT_FEEDBACK_SINCE_VERSION)
+        wayland_dmabuf_feedback_init(&dmabuf->feedback, zwp_linux_dmabuf_v1);
+    else
+        zwp_linux_dmabuf_v1_add_listener(zwp_linux_dmabuf_v1, &dmabuf_listener, dmabuf);
 }
 
 /***********************************************************************
@@ -130,6 +223,8 @@ void wayland_dmabuf_deinit(struct wayland_dmabuf *dmabuf)
 {
     struct wayland_dmabuf_format *format, *tmp;
 
+    wayland_dmabuf_feedback_deinit(&dmabuf->feedback);
+
     if (dmabuf->zwp_linux_dmabuf_v1)
         zwp_linux_dmabuf_v1_destroy(dmabuf->zwp_linux_dmabuf_v1);
 
diff --git a/dlls/winewayland.drv/waylanddrv.h b/dlls/winewayland.drv/waylanddrv.h
index d32a4e2f0eb..0c9b5fda8a2 100644
--- a/dlls/winewayland.drv/waylanddrv.h
+++ b/dlls/winewayland.drv/waylanddrv.h
@@ -26,6 +26,7 @@
 #endif
 
 #include <pthread.h>
+#include <sys/types.h>
 #include <stdarg.h>
 #include <wayland-client.h>
 #include <wayland-cursor.h>
@@ -143,10 +144,17 @@ struct wayland_dmabuf_format
     struct wl_array modifiers;
 };
 
+struct wayland_dmabuf_feedback
+{
+    struct zwp_linux_dmabuf_feedback_v1 *zwp_linux_dmabuf_feedback_v1;
+    dev_t main_device;
+};
+
 struct wayland_dmabuf
 {
     struct zwp_linux_dmabuf_v1 *zwp_linux_dmabuf_v1;
     struct wl_list formats;
+    struct wayland_dmabuf_feedback feedback;
 };
 
 struct wayland
-- 
2.36.1

